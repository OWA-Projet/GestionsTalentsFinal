import time
import datetime
from bs4 import BeautifulSoup
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from ctypes import windll

# Emp√™che l'ordinateur de se mettre en veille
windll.kernel32.SetThreadExecutionState(0x80000002)


def scrape_profile():  # Plus besoin de param√®tre "metier" car tout est interactif
    # Initialisation et configuration du WebDriver
    driver = webdriver.Chrome()
    driver.maximize_window()

    # URL cible
    url = "https://entreprise.francetravail.fr/recherche-profil/rechercheprofil"
    driver.get(url)

    # Attente explicite pour s'assurer que la page est charg√©e correctement
    wait = WebDriverWait(driver, 10)

    # Liste pour stocker les r√©sultats
    resultats = []

    try:
        # Attendre que l'utilisateur entre le m√©tier dans le champ de recherche
        wait.until(
            EC.presence_of_element_located((By.ID, "token-input-champsMultitagQuoi")))  # Assure le chargement complet
        print("üîî Veuillez entrer le M√âTIER dans le champ de recherche de l'interface web.")
        print("Puis, cliquez sur le bouton 'Rechercher CV'.")

        # Pause pour permettre √† l'utilisateur de remplir manuellement le formulaire
        input("‚è≥ Quand vous avez termin√©, appuyez sur Entr√©e pour continuer le scraping...")
  # Cliquer sur le bouton "Voir le profil" si disponible
        try:
            profile_button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button.lienclic-profil")))
            profile_button.click()
            time.sleep(2)
        except Exception as e:
            print(f"‚ö†Ô∏è Aucun bouton 'Voir profil' trouv√© pour le m√©tier : {e}")


        # Pause courte pour permettre au site de mettre √† jour les r√©sultats
        time.sleep(3)

        # Commencer √† extraire les r√©sultats apr√®s recherche
        i = 1

        while i <= 2000:  # Limite arbitraire pour √©viter une boucle infinie
            try:
                # V√©rifier si une donn√©e est charg√©e
                soup = BeautifulSoup(driver.page_source, "html.parser")
                wait.until(EC.presence_of_element_located((By.CLASS_NAME, "profil-bd")))

                # Extraction des profils
                profils = soup.find_all("div", class_="profil-bd")

                # Arr√™tez si aucun profil n'est trouv√©
                if not profils:
                    print(f"‚ö†Ô∏è Aucun profil trouv√© sur la page {i}. Fin de la pagination.")
                    break

                for profil in profils:
                    # R√©cup√©rer les d√©tails du profil
                    competences_container = profil.find("div", id="zoneAfficherCompetences")

                    # V√©rifiez si le conteneur des comp√©tences est disponible
                    if competences_container:
                        competences = [tag.get_text(strip=True) for tag in
                                       competences_container.select("li.tag.competence span.tag-name")]
                        savoir_etre = [tag.get_text(strip=True) for tag in
                                       competences_container.select("li.tag.qualite span.tag-name")]
                        langues = [tag.get_text(strip=True) for tag in
                                   competences_container.select("li.tag.langue span.tag-name")]
                        permis = [tag.get_text(strip=True) for tag in
                                  competences_container.select("li.tag.permis span.tag-name")]
                    else:
                        competences, savoir_etre, langues, permis = [], [], [], []

                    # Extraction des formations
                    formations = [li.get_text(strip=True, separator=" ") for li in
                                  profil.select("ul.list-unstyled.list-event > li.block-form.event.formation")]

                    # Extraction des exp√©riences
                    experiences = [li.get_text(strip=True, separator=" ") for li in
                                   profil.select("ul.list-unstyled.list-event > li.block-form.event.experience")]

                    # Ajout des donn√©es au tableau
                    resultats.append({
                        "formations": formations,
                        "experiences": experiences,
                        "competences": competences,
                        "Qualit√©s": savoir_etre,
                        "langues": langues,
                        "permis": permis,
                    })

                # Passer √† la page suivante, s‚Äôil existe un bouton "Suivant"
                try:
                    next_button = driver.find_element(By.XPATH, '//button[contains(@class, "btn-nav next")]')

                    # V√©rifiez si le bouton est d√©sactiv√©
                    if "disabled" in next_button.get_attribute("class"):
                        print("‚ö†Ô∏è Bouton 'Suivant' d√©sactiv√© ‚Äì Fin de la pagination.")
                        break

                    next_button.click()
                    time.sleep(2)  # Pause pour le chargement
                except Exception as e:
                    print(f"‚ö†Ô∏è Impossible de naviguer √† la page suivante. Erreur : {e}")
                    break

            except Exception as e:
                print(f"‚ùå Erreur lors de l'extraction des donn√©es √† la page {i}. Erreur : {e}")
                break

            i += 1

    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale : {e}")

    # Sauvegarde des r√©sultats dans un fichier CSV
    if resultats:
        df = pd.DataFrame(resultats)
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        csv_file_name = f"Ing√©nieur logiciel.csv"
        df.to_csv(csv_file_name, index=False, encoding="utf-8")
        print(f"‚úÖ Donn√©es sauvegard√©es avec succ√®s dans le fichier '{csv_file_name}'.")
    else:
        print("‚ùå Aucun r√©sultat n'a pu √™tre extrait.")

    # Fermer le navigateur
    driver.quit()


# Ex√©cuter la fonction (pas de m√©tier en param√®tre, car c'est enti√®rement manuel maintenant)
scrape_profile()

metiers = [
    "---------------------------------",
    "Testeur informatique ",
    "Formateur informatique ",
    "Stage en informatique ",
    "D√©veloppeur Informatique ",
    "s√©curit√© informatique ",
    "Ing√©nieur cloud computing ",
    "Administrateur de base de donn√©es ",
    "Data scientist ",
    "Ing√©nieur t√©l√©coms et r√©seaux ",
    "Ing√©nieur en syst√®mes embarqu√©s ",
    "D√©veloppeur mobiles ",
    "Big data ",
    "Scrum Master Agile ",
    "Product owner ",
    "Architecte web ",
    "Data analyst ",
    "Ing√©nieur logiciel ",
    "",
]